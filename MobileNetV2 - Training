{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1819,"status":"ok","timestamp":1707602284317,"user":{"displayName":"Ishan Dave","userId":"13762692394113223498"},"user_tz":480},"id":"b76652cf","outputId":"3b3195f8-36be-4685-ba31-6a0b1e600ced"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"id":"b76652cf"},{"cell_type":"code","execution_count":null,"metadata":{"id":"78ae10bb"},"outputs":[],"source":["\n","# Please replace the brackets below with the drive location of your folders which included subfolders for images\n","# Sample path: /content/drive/My Drive/ImageClassification\n","TRAINING_PATH = '/content/drive/Shareddrives/1:1_Ishan_Dave/Train'\n","VALIDATION_PATH = '/content/drive/Shareddrives/1:1_Ishan_Dave/Validation'"],"id":"78ae10bb"},{"cell_type":"code","execution_count":null,"metadata":{"id":"0bcb8666"},"outputs":[],"source":["def create_model(base_model, num_classes):\n","    import tensorflow as tf\n","    # Grab the last layer and add a few extra layers to it\n","    x=base_model.output\n","    x=GlobalAveragePooling2D()(x)\n","    # Dense layer 1\n","    x=tf.keras.layers.Dense(100,activation='relu', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=True)(x)\n","\n","    # Final layer with softmax activation\n","    preds=tf.keras.layers.Dense(num_classes,activation='softmax89', kernel_initializer=tf.keras.initializers.VarianceScaling(), use_bias=False)(x)\n","\n","    # Create the final model\n","    model=Model(inputs=base_model.input,outputs=preds)\n","    return model\n"],"id":"0bcb8666"},{"cell_type":"code","execution_count":null,"metadata":{"id":"a7733499"},"outputs":[],"source":["def get_optimizer(optimizer_name, learning_rate):\n","    # Import keras optimizers\n","    from tensorflow.keras.optimizers import Adam, Adadelta, Adagrad, Adamax, Ftrl, Nadam, RMSprop, SGD\n","    print('Selected Optimizer', optimizer_name)\n","    switcher = {\n","        'Adadelta': Adadelta(learning_rate=learning_rate),\n","        'Adagrad': Adagrad(learning_rate=learning_rate),\n","        'Adam': Adam(learning_rate=learning_rate),\n","        'Adamax': Adamax(learning_rate=learning_rate),\n","        'FTRL': Ftrl(learning_rate=learning_rate),\n","        'NAdam': Nadam(learning_rate=learning_rate),\n","        'RMSprop': RMSprop(learning_rate=learning_rate),\n","        'Gradient Descent': SGD(learning_rate=learning_rate)\n","    }\n","    # If optimizer_name is empty, Adam will be return as default optimizer\n","    return switcher.get(optimizer_name, Adam(learning_rate=learning_rate))\n"],"id":"a7733499"},{"cell_type":"code","execution_count":null,"metadata":{"id":"e1978032"},"outputs":[],"source":["\n","# Import packages needed to create a image classification model\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf\n","\n","from keras.applications.mobilenet_v2 import preprocess_input\n","from keras.preprocessing.image import ImageDataGenerator\n","from keras.layers import Dense,GlobalAveragePooling2D\n","from keras.models import Model\n","from tensorflow.keras import regularizers\n","\n","from tensorflow.keras.preprocessing import image_dataset_from_directory\n","from keras.callbacks import EarlyStopping\n","from tensorflow import keras\n","\n","# Initialize hyper params\n","epochs = 50 #<-- increase for higher accuracy\n","base_learning_rate = 0.05 #decrease for different results; use excel sheet to note down results from each change to learning rate and epochs\n","optimizer = 'Adam'\n","BATCH_SIZE = 32\n","\n","IMG_SIZE = (224, 224)\n","\n","# Create the data generation pipeline for training and validation\n","train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\n","\n","train_generator = train_datagen.flow_from_directory(TRAINING_PATH,\n","                                                target_size=IMG_SIZE,\n","                                                color_mode='rgb',\n","                                                batch_size=BATCH_SIZE,\n","                                                class_mode='categorical',\n","                                                shuffle=True,\n","                                                )\n","validation_generator = validation_datagen.flow_from_directory(VALIDATION_PATH,\n","                                                target_size=IMG_SIZE,\n","                                                color_mode='rgb',\n","                                                batch_size=BATCH_SIZE,\n","                                                class_mode='categorical',\n","                                                shuffle=True,\n","                                                )\n","\n","print(validation_generator.class_indices.keys())\n","# Download the model, valid alpha values [0.25,0.35,0.5,0.75,1]\n","base_model = tf.keras.applications.mobilenet_v2.MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet', alpha=0.35)\n","for layer in base_model.layers:\n","    layer.trainable=False\n","\n","# Specify the number of classes\n","num_classes = 2\n","\n","# Create the base model\n","model = create_model(base_model,num_classes)\n","\n","print(len(base_model.layers))\n","\n","model.compile(optimizer = get_optimizer(optimizer_name=optimizer,learning_rate=base_learning_rate),loss='CategoricalCrossentropy',metrics=['accuracy'])\n","# Adam optimizer\n","# loss function will be categorical cross entropy\n","# evaluation metric will be accuracy\n","\n","early_stopping_monitor = EarlyStopping(\n","    monitor='val_loss',\n","    min_delta=0,\n","    patience=30,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n","\n","step_size_train = train_generator.n//train_generator.batch_size\n","history_fine = model.fit(train_generator,\n","                        epochs=epochs,\n","                        validation_data = validation_generator,\n","                        verbose=1)"],"id":"e1978032"},{"cell_type":"code","source":["def visualization():\n","    import pandas as pd\n","    df = pd.DataFrame(history_fine.history)\n","    #loss plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['loss'], color='red', label = \"Training_loss\")\n","    plt.plot(df['val_loss'], color='blue')\n","    plt.legend(['Training Loss','Validation loss'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation loss')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","    #accuracy plots\n","    plt.figure(figsize=(8,8))\n","    plt.plot(df['accuracy'], color='red')\n","    plt.plot(df['val_accuracy'], color='blue')\n","    plt.legend(['Training acc','Validation acc'],loc = 'best' )\n","    plt.title('Line plot of Training and Validation Accuracies')\n","    plt.ylim(0,1)\n","    plt.show()\n","\n","visualization()"],"metadata":{"id":"VIV_LOPybQWa"},"id":"VIV_LOPybQWa","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8756be45"},"outputs":[],"source":["\n","# Import numpy for calculating best model accuracy\n","import numpy as np\n","# Populating matrics -> accuracy & loss\n","acc = history_fine.history['accuracy']\n","val_acc = history_fine.history['val_accuracy']\n","\n","loss = history_fine.history['loss']\n","val_loss = history_fine.history['val_loss']\n","\n","print('Training Accuracy: ', acc)\n","print('Validation Accuracy: ', val_acc)\n","print('Training Loss: ', loss)\n","print('Validation Loss: ', val_loss)\n","best_model_accuracy = history_fine.history['val_accuracy'][np.argmin(history_fine.history['val_loss'])]\n","print('best model accuracy: ', best_model_accuracy)\n"],"id":"8756be45"},{"cell_type":"code","execution_count":null,"metadata":{"id":"4c863fdc"},"outputs":[],"source":["def seperate_labels(generator):\n","    x_validation = []\n","    y_validation = []\n","    num_seen = 0\n","\n","    for x, labels in generator:\n","        x_validation.append(x)\n","        y_validation.append([argmax(label) for label in labels])\n","        num_seen += len(x)\n","        if num_seen == generator.n: break\n","\n","    x_validation = np.concatenate(x_validation)\n","    y_validation = np.concatenate(y_validation)\n","    return x_validation, y_validation\n"],"id":"4c863fdc"},{"cell_type":"code","execution_count":null,"metadata":{"id":"a650757c"},"outputs":[],"source":["\n","# Calculate and display the confusion matrix\n","import matplotlib.pyplot as plt\n","from numpy.core.fromnumeric import argmax\n","from sklearn.metrics import ConfusionMatrixDisplay\n","\n","x_validation, y_validation = seperate_labels(validation_generator)\n","y_pred = model.predict(x_validation, batch_size=BATCH_SIZE)\n","predictions = np.apply_along_axis(argmax, 1, y_pred)\n","display_labels = validation_generator.class_indices.keys()\n","\n","# ConfusionMatrixDisplay.from_predictions(y_validation, predictions, display_labels=display_labels, cmap=\"binary\")\n","# plt.show()\n"],"id":"a650757c"},{"cell_type":"code","source":["import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report\n","plt.figure(figsize = (10,10))\n","sns.heatmap(confusion_matrix(y_validation, predictions), annot = True, fmt = 'g', cmap = \"Blues\",xticklabels=display_labels, yticklabels=display_labels)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"],"metadata":{"id":"0hlIInn6bhOE"},"id":"0hlIInn6bhOE","execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(classification_report(y_validation, predictions))"],"metadata":{"id":"ek591f4PcMvK"},"id":"ek591f4PcMvK","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f13b9f0c"},"outputs":[],"source":["\n","# Predicting code for an image\n","from tensorflow.keras.preprocessing import image\n","# Please replace the brackets below with the location of your image which need to predict\n","img_path = '<>'\n","img = image.load_img(img_path, target_size=IMG_SIZE)\n","img_array = image.img_to_array(img)\n","img_batch = np.expand_dims(img_array, axis=0)\n","img_preprocessed = preprocess_input(img_batch)\n","prediction = model.predict(img_preprocessed)\n","print(prediction)\n"],"id":"f13b9f0c"}],"metadata":{"colab":{"provenance":[{"file_id":"1cGS-XqlelZpoo-WOMa5AhmW3rmi5dI20","timestamp":1707388324303},{"file_id":"1kodshi7IaN_JqtlEsV5bn7WCBqzabNs1","timestamp":1685428949853},{"file_id":"1vtiqe4ChiKErzzE6lvfA-WUPwxH3oS4A","timestamp":1683914875497},{"file_id":"1b_idYmr0JOYT6X2dOsLzw25QB-la8O1t","timestamp":1672650124899},{"file_id":"17_UZwzcmAYzKCE279eaOMAklbbaUZN5H","timestamp":1670891677735},{"file_id":"1Zlv6RFpBOTiXg7rOnEaI_gXIY8H8PgaX","timestamp":1670887583215}],"gpuType":"T4"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":5}